from tkinter import *
from math import sqrt

xy=[-20,0]
xy_g_1=[-20,0]
xy_g_2=[20, 0]
xy_g_3=[0, 20]
xy_g_4=[-20,0]
way_shadow=0
x=220
y=120
score=0
lives=2
set_dot=([250.0, 210.0, 250.0, 210.0], [270.0, 210.0, 270.0, 210.0], [290.0, 210.0, 290.0, 210.0], [310.0, 210.0, 310.0, 210.0], [330.0, 210.0, 330.0, 210.0],
         [350.0, 210.0, 350.0, 210.0], [370.0, 210.0, 370.0, 210.0], [390.0, 210.0, 390.0, 210.0], [410.0, 210.0, 410.0, 210.0], [430.0, 210.0, 430.0, 210.0],
         [450.0, 210.0, 450.0, 210.0], [470.0, 210.0, 470.0, 210.0], [470.0, 230.0, 470.0, 230.0], [470.0, 250.0, 470.0, 250.0], [470.0, 270.0, 470.0, 270.0],
         [470.0, 290.0, 470.0, 290.0], [490.0, 290.0, 490.0, 290.0], [510.0, 290.0, 510.0, 290.0], [530.0, 290.0, 530.0, 290.0], [550.0, 290.0, 550.0, 290.0],
         [530.0, 270.0, 530.0, 270.0], [530.0, 250.0, 530.0, 250.0], [530.0, 230.0, 530.0, 230.0], [530.0, 210.0, 530.0, 210.0], [550.0, 210.0, 550.0, 210.0],
         [570.0, 210.0, 570.0, 210.0], [590.0, 210.0, 590.0, 210.0], [610.0, 210.0, 610.0, 210.0], [630.0, 210.0, 630.0, 210.0], [650.0, 210.0, 650.0, 210.0],
         [670.0, 210.0, 670.0, 210.0], [690.0, 210.0, 690.0, 210.0], [710.0, 210.0, 710.0, 210.0], [730.0, 210.0, 730.0, 210.0], [750.0, 210.0, 750.0, 210.0],
         [750.0, 230.0, 750.0, 230.0], [750.0, 250.0, 750.0, 250.0], [750.0, 270.0, 750.0, 270.0], [750.0, 290.0, 750.0, 290.0], [750.0, 310.0, 750.0, 310.0],
         [750.0, 330.0, 750.0, 330.0], [750.0, 350.0, 750.0, 350.0], [730.0, 350.0, 730.0, 350.0], [710.0, 350.0, 710.0, 350.0], [690.0, 350.0, 690.0, 350.0],
         [670.0, 350.0, 670.0, 350.0], [650.0, 350.0, 650.0, 350.0], [650.0, 330.0, 650.0, 330.0], [650.0, 310.0, 650.0, 310.0], [650.0, 290.0, 650.0, 290.0],
         [670.0, 290.0, 670.0, 290.0], [690.0, 290.0, 690.0, 290.0], [710.0, 290.0, 710.0, 290.0], [730.0, 290.0, 730.0, 290.0], [650.0, 270.0, 650.0, 270.0],
         [650.0, 250.0, 650.0, 250.0], [650.0, 230.0, 650.0, 230.0], [630.0, 290.0, 630.0, 290.0], [610.0, 290.0, 610.0, 290.0], [590.0, 290.0, 590.0, 290.0],
         [570.0, 290.0, 570.0, 290.0], [450.0, 290.0, 450.0, 290.0], [430.0, 290.0, 430.0, 290.0], [410.0, 290.0, 410.0, 290.0], [390.0, 290.0, 390.0, 290.0],
         [370.0, 290.0, 370.0, 290.0], [350.0, 290.0, 350.0, 290.0], [350.0, 270.0, 350.0, 270.0], [350.0, 250.0, 350.0, 250.0], [350.0, 230.0, 350.0, 230.0],
         [350.0, 310.0, 350.0, 310.0], [330.0, 290.0, 330.0, 290.0], [310.0, 290.0, 310.0, 290.0], [290.0, 290.0, 290.0, 290.0], [270.0, 290.0, 270.0, 290.0],
         [250.0, 290.0, 250.0, 290.0], [250.0, 270.0, 250.0, 270.0], [250.0, 250.0, 250.0, 250.0], [250.0, 230.0, 250.0, 230.0], [250.0, 310.0, 250.0, 310.0],
         [250.0, 330.0, 250.0, 330.0], [250.0, 350.0, 250.0, 350.0], [270.0, 350.0, 270.0, 350.0], [290.0, 350.0, 290.0, 350.0], [310.0, 350.0, 310.0, 350.0],
         [330.0, 350.0, 330.0, 350.0], [350.0, 350.0, 350.0, 350.0], [350.0, 330.0, 350.0, 330.0], [410.0, 310.0, 410.0, 310.0], [410.0, 330.0, 410.0, 330.0],
         [410.0, 350.0, 410.0, 350.0], [430.0, 350.0, 430.0, 350.0], [450.0, 350.0, 450.0, 350.0], [470.0, 350.0, 470.0, 350.0], [590.0, 310.0, 590.0, 310.0],
         [590.0, 330.0, 590.0, 330.0], [590.0, 350.0, 590.0, 350.0], [570.0, 350.0, 570.0, 350.0], [550.0, 350.0, 550.0, 350.0], [530.0, 350.0, 530.0, 350.0],
         [650.0, 370.0, 650.0, 370.0], [650.0, 390.0, 650.0, 390.0], [650.0, 410.0, 650.0, 410.0], [650.0, 430.0, 650.0, 430.0], [650.0, 450.0, 650.0, 450.0],
         [650.0, 470.0, 650.0, 470.0], [650.0, 490.0, 650.0, 490.0], [650.0, 510.0, 650.0, 510.0], [650.0, 530.0, 650.0, 530.0], [650.0, 550.0, 650.0, 550.0],
         [650.0, 570.0, 650.0, 570.0], [650.0, 590.0, 650.0, 590.0], [650.0, 610.0, 650.0, 610.0], [650.0, 630.0, 650.0, 630.0], [670.0, 590.0, 670.0, 590.0],
         [690.0, 590.0, 690.0, 590.0], [710.0, 590.0, 710.0, 590.0], [730.0, 590.0, 730.0, 590.0], [750.0, 590.0, 750.0, 590.0], [750.0, 610.0, 750.0, 610.0],
         [750.0, 630.0, 750.0, 630.0], [750.0, 650.0, 750.0, 650.0], [730.0, 650.0, 730.0, 650.0], [710.0, 650.0, 710.0, 650.0], [710.0, 670.0, 710.0, 670.0],
         [710.0, 690.0, 710.0, 690.0], [710.0, 710.0, 710.0, 710.0], [730.0, 710.0, 730.0, 710.0], [750.0, 710.0, 750.0, 710.0], [750.0, 730.0, 750.0, 730.0],
         [750.0, 750.0, 750.0, 750.0], [750.0, 770.0, 750.0, 770.0], [730.0, 770.0, 730.0, 770.0], [710.0, 770.0, 710.0, 770.0], [690.0, 770.0, 690.0, 770.0],
         [670.0, 770.0, 670.0, 770.0], [650.0, 770.0, 650.0, 770.0], [630.0, 770.0, 630.0, 770.0], [610.0, 770.0, 610.0, 770.0], [590.0, 770.0, 590.0, 770.0],
         [570.0, 770.0, 570.0, 770.0], [550.0, 770.0, 550.0, 770.0], [530.0, 770.0, 530.0, 770.0], [510.0, 770.0, 510.0, 770.0], [490.0, 770.0, 490.0, 770.0],
         [470.0, 770.0, 470.0, 770.0], [450.0, 770.0, 450.0, 770.0], [430.0, 770.0, 430.0, 770.0], [410.0, 770.0, 410.0, 770.0], [390.0, 770.0, 390.0, 770.0],
         [370.0, 770.0, 370.0, 770.0], [350.0, 770.0, 350.0, 770.0], [330.0, 770.0, 330.0, 770.0], [310.0, 770.0, 310.0, 770.0], [290.0, 770.0, 290.0, 770.0],
         [270.0, 770.0, 270.0, 770.0], [250.0, 770.0, 250.0, 770.0], [250.0, 750.0, 250.0, 750.0], [250.0, 730.0, 250.0, 730.0], [250.0, 710.0, 250.0, 710.0],
         [270.0, 710.0, 270.0, 710.0], [290.0, 710.0, 290.0, 710.0], [290.0, 690.0, 290.0, 690.0], [290.0, 670.0, 290.0, 670.0], [290.0, 650.0, 290.0, 650.0],
         [270.0, 650.0, 270.0, 650.0], [250.0, 650.0, 250.0, 650.0], [250.0, 630.0, 250.0, 630.0], [250.0, 610.0, 250.0, 610.0], [250.0, 590.0, 250.0, 590.0],
         [270.0, 590.0, 270.0, 590.0], [290.0, 590.0, 290.0, 590.0], [310.0, 590.0, 310.0, 590.0], [330.0, 590.0, 330.0, 590.0], [350.0, 590.0, 350.0, 590.0],
         [350.0, 570.0, 350.0, 570.0], [350.0, 550.0, 350.0, 550.0], [350.0, 530.0, 350.0, 530.0], [350.0, 510.0, 350.0, 510.0], [350.0, 490.0, 350.0, 490.0],
         [350.0, 470.0, 350.0, 470.0], [350.0, 450.0, 350.0, 450.0], [350.0, 430.0, 350.0, 430.0], [350.0, 410.0, 350.0, 410.0], [350.0, 390.0, 350.0, 390.0],
         [350.0, 370.0, 350.0, 370.0], [350.0, 610.0, 350.0, 610.0], [350.0, 630.0, 350.0, 630.0], [350.0, 650.0, 350.0, 650.0], [350.0, 670.0, 350.0, 670.0],
         [350.0, 690.0, 350.0, 690.0], [350.0, 710.0, 350.0, 710.0], [330.0, 710.0, 330.0, 710.0], [310.0, 710.0, 310.0, 710.0], [370.0, 650.0, 370.0, 650.0],
         [390.0, 650.0, 390.0, 650.0], [410.0, 650.0, 410.0, 650.0], [370.0, 590.0, 370.0, 590.0], [390.0, 590.0, 390.0, 590.0], [410.0, 590.0, 410.0, 590.0],
         [430.0, 590.0, 430.0, 590.0], [450.0, 590.0, 450.0, 590.0], [470.0, 590.0, 470.0, 590.0], [470.0, 610.0, 470.0, 610.0], [470.0, 630.0, 470.0, 630.0],
         [470.0, 650.0, 470.0, 650.0], [450.0, 650.0, 450.0, 650.0], [430.0, 650.0, 430.0, 650.0], [410.0, 670.0, 410.0, 670.0], [410.0, 690.0, 410.0, 690.0],
         [410.0, 710.0, 410.0, 710.0], [430.0, 710.0, 430.0, 710.0], [450.0, 710.0, 450.0, 710.0], [470.0, 710.0, 470.0, 710.0], [470.0, 730.0, 470.0, 730.0],
         [470.0, 750.0, 470.0, 750.0], [530.0, 750.0, 530.0, 750.0], [530.0, 730.0, 530.0, 730.0], [530.0, 710.0, 530.0, 710.0], [550.0, 710.0, 550.0, 710.0],
         [570.0, 710.0, 570.0, 710.0], [590.0, 710.0, 590.0, 710.0], [590.0, 690.0, 590.0, 690.0], [590.0, 670.0, 590.0, 670.0], [590.0, 650.0, 590.0, 650.0],
         [610.0, 650.0, 610.0, 650.0], [630.0, 650.0, 630.0, 650.0], [650.0, 650.0, 650.0, 650.0], [650.0, 670.0, 650.0, 670.0], [650.0, 690.0, 650.0, 690.0],
         [650.0, 710.0, 650.0, 710.0], [670.0, 710.0, 670.0, 710.0], [690.0, 710.0, 690.0, 710.0], [630.0, 590.0, 630.0, 590.0], [610.0, 590.0, 610.0, 590.0],
         [590.0, 590.0, 590.0, 590.0], [570.0, 590.0, 570.0, 590.0], [550.0, 590.0, 550.0, 590.0], [530.0, 590.0, 530.0, 590.0], [530.0, 610.0, 530.0, 610.0],
         [530.0, 630.0, 530.0, 630.0], [530.0, 650.0, 530.0, 650.0], [550.0, 650.0, 550.0, 650.0], [570.0, 650.0, 570.0, 650.0])




set_coords=([235.0, 195.0, 265.0, 225.0], [235.0, 205.0, 265.0, 235.0], [235.0, 215.0, 265.0, 245.0], [235.0, 225.0, 265.0, 255.0], [235.0, 235.0, 265.0, 265.0],
            [235.0, 245.0, 265.0, 275.0], [235.0, 255.0, 265.0, 285.0], [235.0, 265.0, 265.0, 295.0], [235.0, 275.0, 265.0, 305.0], [235.0, 285.0, 265.0, 315.0],
            [235.0, 295.0, 265.0, 325.0], [235.0, 305.0, 265.0, 335.0], [235.0, 315.0, 265.0, 345.0], [235.0, 325.0, 265.0, 355.0], [235.0, 335.0, 265.0, 365.0],
            [245.0, 335.0, 275.0, 365.0], [255.0, 335.0, 285.0, 365.0], [265.0, 335.0, 295.0, 365.0], [275.0, 335.0, 305.0, 365.0], [285.0, 335.0, 315.0, 365.0],
            [295.0, 335.0, 325.0, 365.0], [305.0, 335.0, 335.0, 365.0], [315.0, 335.0, 345.0, 365.0], [325.0, 335.0, 355.0, 365.0], [335.0, 335.0, 365.0, 365.0],
            [335.0, 325.0, 365.0, 355.0], [335.0, 315.0, 365.0, 345.0], [335.0, 305.0, 365.0, 335.0], [335.0, 295.0, 365.0, 325.0], [335.0, 285.0, 365.0, 315.0],
            [335.0, 275.0, 365.0, 305.0], [325.0, 275.0, 355.0, 305.0], [315.0, 275.0, 345.0, 305.0], [305.0, 275.0, 335.0, 305.0], [295.0, 275.0, 325.0, 305.0],
            [285.0, 275.0, 315.0, 305.0], [275.0, 275.0, 305.0, 305.0], [265.0, 275.0, 295.0, 305.0], [255.0, 275.0, 285.0, 305.0], [245.0, 275.0, 275.0, 305.0],
            [245.0, 195.0, 275.0, 225.0], [255.0, 195.0, 285.0, 225.0], [265.0, 195.0, 295.0, 225.0], [275.0, 195.0, 305.0, 225.0], [285.0, 195.0, 315.0, 225.0],
            [295.0, 195.0, 325.0, 225.0], [305.0, 195.0, 335.0, 225.0], [315.0, 195.0, 345.0, 225.0], [325.0, 195.0, 355.0, 225.0], [335.0, 195.0, 365.0, 225.0],
            [335.0, 205.0, 365.0, 235.0], [335.0, 215.0, 365.0, 245.0], [335.0, 225.0, 365.0, 255.0], [335.0, 235.0, 365.0, 265.0], [335.0, 245.0, 365.0, 275.0],
            [335.0, 255.0, 365.0, 285.0], [335.0, 265.0, 365.0, 295.0], [345.0, 275.0, 375.0, 305.0], [355.0, 275.0, 385.0, 305.0], [365.0, 275.0, 395.0, 305.0],
            [375.0, 275.0, 405.0, 305.0], [385.0, 275.0, 415.0, 305.0], [395.0, 275.0, 425.0, 305.0], [405.0, 275.0, 435.0, 305.0], [415.0, 275.0, 445.0, 305.0],
            [425.0, 275.0, 455.0, 305.0], [435.0, 275.0, 465.0, 305.0], [445.0, 275.0, 475.0, 305.0], [455.0, 275.0, 485.0, 305.0], [455.0, 265.0, 485.0, 295.0],
            [455.0, 255.0, 485.0, 285.0], [455.0, 245.0, 485.0, 275.0], [455.0, 235.0, 485.0, 265.0], [455.0, 225.0, 485.0, 255.0], [455.0, 215.0, 485.0, 245.0],
            [455.0, 205.0, 485.0, 235.0], [455.0, 195.0, 485.0, 225.0], [445.0, 195.0, 475.0, 225.0], [435.0, 195.0, 465.0, 225.0], [425.0, 195.0, 455.0, 225.0],
            [415.0, 195.0, 445.0, 225.0], [405.0, 195.0, 435.0, 225.0], [395.0, 195.0, 425.0, 225.0], [385.0, 195.0, 415.0, 225.0], [375.0, 195.0, 405.0, 225.0],
            [365.0, 195.0, 395.0, 225.0], [355.0, 195.0, 385.0, 225.0], [345.0, 195.0, 375.0, 225.0], [335.0, 345.0, 365.0, 375.0], [335.0, 355.0, 365.0, 385.0],
            [335.0, 365.0, 365.0, 395.0], [335.0, 375.0, 365.0, 405.0], [335.0, 385.0, 365.0, 415.0], [335.0, 395.0, 365.0, 425.0], [335.0, 405.0, 365.0, 435.0],
            [335.0, 415.0, 365.0, 445.0], [335.0, 425.0, 365.0, 455.0], [335.0, 435.0, 365.0, 465.0], [335.0, 445.0, 365.0, 475.0], [335.0, 455.0, 365.0, 485.0],
            [325.0, 455.0, 355.0, 485.0], [315.0, 455.0, 345.0, 485.0], [305.0, 455.0, 335.0, 485.0], [295.0, 455.0, 325.0, 485.0], [285.0, 455.0, 315.0, 485.0],
            [275.0, 455.0, 305.0, 485.0], [265.0, 455.0, 295.0, 485.0], [255.0, 455.0, 285.0, 485.0], [245.0, 455.0, 275.0, 485.0], [235.0, 455.0, 265.0, 485.0],
            [225.0, 455.0, 255.0, 485.0], [215.0, 455.0, 245.0, 485.0], [205.0, 455.0, 235.0, 485.0], [195.0, 455.0, 225.0, 485.0], [185.0, 455.0, 215.0, 485.0],
            [345.0, 455.0, 375.0, 485.0], [355.0, 455.0, 385.0, 485.0], [365.0, 455.0, 395.0, 485.0], [375.0, 455.0, 405.0, 485.0], [385.0, 455.0, 415.0, 485.0],
            [395.0, 455.0, 425.0, 485.0], [395.0, 445.0, 425.0, 475.0], [395.0, 435.0, 425.0, 465.0], [395.0, 425.0, 425.0, 455.0], [395.0, 415.0, 425.0, 445.0],
            [395.0, 405.0, 425.0, 435.0], [395.0, 395.0, 425.0, 425.0], [405.0, 395.0, 435.0, 425.0], [415.0, 395.0, 445.0, 425.0], [425.0, 395.0, 455.0, 425.0],
            [435.0, 395.0, 465.0, 425.0], [445.0, 395.0, 475.0, 425.0], [455.0, 395.0, 485.0, 425.0], [455.0, 385.0, 485.0, 415.0], [455.0, 375.0, 485.0, 405.0],
            [455.0, 365.0, 485.0, 395.0], [455.0, 355.0, 485.0, 385.0], [455.0, 345.0, 485.0, 375.0], [455.0, 335.0, 485.0, 365.0], [445.0, 335.0, 475.0, 365.0],
            [435.0, 335.0, 465.0, 365.0], [425.0, 335.0, 455.0, 365.0], [415.0, 335.0, 445.0, 365.0], [405.0, 335.0, 435.0, 365.0], [395.0, 335.0, 425.0, 365.0],
            [395.0, 325.0, 425.0, 355.0], [395.0, 315.0, 425.0, 345.0], [395.0, 305.0, 425.0, 335.0], [395.0, 295.0, 425.0, 325.0], [395.0, 285.0, 425.0, 315.0],
            [465.0, 275.0, 495.0, 305.0], [475.0, 275.0, 505.0, 305.0], [485.0, 275.0, 515.0, 305.0], [495.0, 275.0, 525.0, 305.0], [505.0, 275.0, 535.0, 305.0],
            [515.0, 275.0, 545.0, 305.0], [525.0, 275.0, 555.0, 305.0], [535.0, 275.0, 565.0, 305.0], [515.0, 265.0, 545.0, 295.0], [515.0, 255.0, 545.0, 285.0],
            [515.0, 245.0, 545.0, 275.0], [515.0, 235.0, 545.0, 265.0], [515.0, 225.0, 545.0, 255.0], [515.0, 215.0, 545.0, 245.0], [515.0, 205.0, 545.0, 235.0],
            [515.0, 195.0, 545.0, 225.0], [525.0, 195.0, 555.0, 225.0], [535.0, 195.0, 565.0, 225.0], [545.0, 195.0, 575.0, 225.0], [555.0, 195.0, 585.0, 225.0],
            [565.0, 195.0, 595.0, 225.0], [575.0, 195.0, 605.0, 225.0], [585.0, 195.0, 615.0, 225.0], [595.0, 195.0, 625.0, 225.0], [605.0, 195.0, 635.0, 225.0],
            [615.0, 195.0, 645.0, 225.0], [625.0, 195.0, 655.0, 225.0], [635.0, 195.0, 665.0, 225.0], [645.0, 195.0, 675.0, 225.0], [655.0, 195.0, 685.0, 225.0],
            [665.0, 195.0, 695.0, 225.0], [675.0, 195.0, 705.0, 225.0], [685.0, 195.0, 715.0, 225.0], [695.0, 195.0, 725.0, 225.0], [705.0, 195.0, 735.0, 225.0],
            [715.0, 195.0, 745.0, 225.0], [725.0, 195.0, 755.0, 225.0], [735.0, 195.0, 765.0, 225.0], [735.0, 205.0, 765.0, 235.0], [735.0, 215.0, 765.0, 245.0],
            [735.0, 225.0, 765.0, 255.0], [735.0, 235.0, 765.0, 265.0], [735.0, 245.0, 765.0, 275.0], [735.0, 255.0, 765.0, 285.0], [735.0, 265.0, 765.0, 295.0],
            [735.0, 275.0, 765.0, 305.0], [735.0, 285.0, 765.0, 315.0], [735.0, 295.0, 765.0, 325.0], [735.0, 305.0, 765.0, 335.0], [735.0, 315.0, 765.0, 345.0],
            [735.0, 325.0, 765.0, 355.0], [735.0, 335.0, 765.0, 365.0], [725.0, 335.0, 755.0, 365.0], [715.0, 335.0, 745.0, 365.0], [705.0, 335.0, 735.0, 365.0],
            [695.0, 335.0, 725.0, 365.0], [685.0, 335.0, 715.0, 365.0], [675.0, 335.0, 705.0, 365.0], [665.0, 335.0, 695.0, 365.0], [655.0, 335.0, 685.0, 365.0],
            [645.0, 335.0, 675.0, 365.0], [635.0, 335.0, 665.0, 365.0], [635.0, 325.0, 665.0, 355.0], [635.0, 315.0, 665.0, 345.0], [635.0, 305.0, 665.0, 335.0],
            [635.0, 295.0, 665.0, 325.0], [635.0, 285.0, 665.0, 315.0], [635.0, 275.0, 665.0, 305.0], [635.0, 265.0, 665.0, 295.0], [635.0, 255.0, 665.0, 285.0],
            [635.0, 245.0, 665.0, 275.0], [635.0, 235.0, 665.0, 265.0], [635.0, 225.0, 665.0, 255.0], [635.0, 215.0, 665.0, 245.0], [645.0, 275.0, 675.0, 305.0],
            [655.0, 275.0, 685.0, 305.0], [665.0, 275.0, 695.0, 305.0], [675.0, 275.0, 705.0, 305.0], [685.0, 275.0, 715.0, 305.0], [695.0, 275.0, 725.0, 305.0],
            [705.0, 275.0, 735.0, 305.0], [715.0, 275.0, 745.0, 305.0], [625.0, 275.0, 655.0, 305.0], [615.0, 275.0, 645.0, 305.0], [605.0, 275.0, 635.0, 305.0],
            [595.0, 275.0, 625.0, 305.0], [585.0, 275.0, 615.0, 305.0], [575.0, 275.0, 605.0, 305.0], [565.0, 275.0, 595.0, 305.0], [555.0, 275.0, 585.0, 305.0],
            [575.0, 285.0, 605.0, 315.0], [575.0, 295.0, 605.0, 325.0], [575.0, 305.0, 605.0, 335.0], [575.0, 315.0, 605.0, 345.0], [575.0, 325.0, 605.0, 355.0],
            [575.0, 335.0, 605.0, 365.0], [565.0, 335.0, 595.0, 365.0], [555.0, 335.0, 585.0, 365.0], [545.0, 335.0, 575.0, 365.0], [535.0, 335.0, 565.0, 365.0],
            [525.0, 335.0, 555.0, 365.0], [515.0, 335.0, 545.0, 365.0], [515.0, 345.0, 545.0, 375.0], [515.0, 355.0, 545.0, 385.0], [515.0, 365.0, 545.0, 395.0],
            [515.0, 375.0, 545.0, 405.0], [515.0, 385.0, 545.0, 415.0], [515.0, 395.0, 545.0, 425.0], [505.0, 395.0, 535.0, 425.0], [495.0, 395.0, 525.0, 425.0],
            [485.0, 395.0, 515.0, 425.0], [475.0, 395.0, 505.0, 425.0], [465.0, 395.0, 495.0, 425.0], [395.0, 465.0, 425.0, 495.0], [395.0, 475.0, 425.0, 505.0],
            [395.0, 485.0, 425.0, 515.0], [395.0, 495.0, 425.0, 525.0], [395.0, 505.0, 425.0, 535.0], [395.0, 515.0, 425.0, 545.0], [395.0, 525.0, 425.0, 555.0],
            [395.0, 535.0, 425.0, 565.0], [395.0, 545.0, 425.0, 575.0], [395.0, 555.0, 425.0, 585.0], [395.0, 565.0, 425.0, 595.0], [395.0, 575.0, 425.0, 605.0],
            [385.0, 575.0, 415.0, 605.0], [375.0, 575.0, 405.0, 605.0], [365.0, 575.0, 395.0, 605.0], [355.0, 575.0, 385.0, 605.0], [345.0, 575.0, 375.0, 605.0],
            [335.0, 575.0, 365.0, 605.0], [335.0, 565.0, 365.0, 595.0], [335.0, 555.0, 365.0, 585.0], [335.0, 545.0, 365.0, 575.0], [335.0, 535.0, 365.0, 565.0],
            [335.0, 525.0, 365.0, 555.0], [335.0, 515.0, 365.0, 545.0], [335.0, 505.0, 365.0, 535.0], [335.0, 495.0, 365.0, 525.0], [335.0, 485.0, 365.0, 515.0],
            [335.0, 475.0, 365.0, 505.0], [335.0, 465.0, 365.0, 495.0], [325.0, 575.0, 355.0, 605.0], [315.0, 575.0, 345.0, 605.0], [305.0, 575.0, 335.0, 605.0],
            [295.0, 575.0, 325.0, 605.0], [285.0, 575.0, 315.0, 605.0], [275.0, 575.0, 305.0, 605.0], [265.0, 575.0, 295.0, 605.0], [255.0, 575.0, 285.0, 605.0],
            [245.0, 575.0, 275.0, 605.0], [235.0, 575.0, 265.0, 605.0], [235.0, 585.0, 265.0, 615.0], [235.0, 595.0, 265.0, 625.0], [235.0, 605.0, 265.0, 635.0],
            [235.0, 615.0, 265.0, 645.0], [235.0, 625.0, 265.0, 655.0], [235.0, 635.0, 265.0, 665.0], [245.0, 635.0, 275.0, 665.0], [255.0, 635.0, 285.0, 665.0],
            [265.0, 635.0, 295.0, 665.0], [275.0, 635.0, 305.0, 665.0], [275.0, 645.0, 305.0, 675.0], [275.0, 655.0, 305.0, 685.0], [275.0, 665.0, 305.0, 695.0],
            [275.0, 675.0, 305.0, 705.0], [275.0, 685.0, 305.0, 715.0], [275.0, 695.0, 305.0, 725.0], [265.0, 695.0, 295.0, 725.0], [255.0, 695.0, 285.0, 725.0],
            [245.0, 695.0, 275.0, 725.0], [235.0, 695.0, 265.0, 725.0], [235.0, 705.0, 265.0, 735.0], [235.0, 715.0, 265.0, 745.0], [235.0, 725.0, 265.0, 755.0],
            [235.0, 735.0, 265.0, 765.0], [235.0, 745.0, 265.0, 775.0], [235.0, 755.0, 265.0, 785.0], [245.0, 755.0, 275.0, 785.0], [255.0, 755.0, 285.0, 785.0],
            [265.0, 755.0, 295.0, 785.0], [275.0, 755.0, 305.0, 785.0], [285.0, 755.0, 315.0, 785.0], [295.0, 755.0, 325.0, 785.0], [305.0, 755.0, 335.0, 785.0],
            [315.0, 755.0, 345.0, 785.0], [325.0, 755.0, 355.0, 785.0], [335.0, 755.0, 365.0, 785.0], [345.0, 755.0, 375.0, 785.0], [355.0, 755.0, 385.0, 785.0],
            [365.0, 755.0, 395.0, 785.0], [375.0, 755.0, 405.0, 785.0], [385.0, 755.0, 415.0, 785.0], [395.0, 755.0, 425.0, 785.0], [405.0, 755.0, 435.0, 785.0],
            [415.0, 755.0, 445.0, 785.0], [425.0, 755.0, 455.0, 785.0], [435.0, 755.0, 465.0, 785.0], [445.0, 755.0, 475.0, 785.0], [455.0, 755.0, 485.0, 785.0],
            [465.0, 755.0, 495.0, 785.0], [475.0, 755.0, 505.0, 785.0], [485.0, 755.0, 515.0, 785.0], [495.0, 755.0, 525.0, 785.0], [505.0, 755.0, 535.0, 785.0],
            [515.0, 755.0, 545.0, 785.0], [525.0, 755.0, 555.0, 785.0], [535.0, 755.0, 565.0, 785.0], [545.0, 755.0, 575.0, 785.0], [555.0, 755.0, 585.0, 785.0],
            [565.0, 755.0, 595.0, 785.0], [575.0, 755.0, 605.0, 785.0], [585.0, 755.0, 615.0, 785.0], [595.0, 755.0, 625.0, 785.0], [605.0, 755.0, 635.0, 785.0],
            [615.0, 755.0, 645.0, 785.0], [625.0, 755.0, 655.0, 785.0], [635.0, 755.0, 665.0, 785.0], [645.0, 755.0, 675.0, 785.0], [655.0, 755.0, 685.0, 785.0],
            [665.0, 755.0, 695.0, 785.0], [675.0, 755.0, 705.0, 785.0], [685.0, 755.0, 715.0, 785.0], [695.0, 755.0, 725.0, 785.0], [705.0, 755.0, 735.0, 785.0],
            [715.0, 755.0, 745.0, 785.0], [725.0, 755.0, 755.0, 785.0], [735.0, 755.0, 765.0, 785.0], [735.0, 745.0, 765.0, 775.0], [735.0, 735.0, 765.0, 765.0],
            [735.0, 725.0, 765.0, 755.0], [735.0, 715.0, 765.0, 745.0], [735.0, 705.0, 765.0, 735.0], [735.0, 695.0, 765.0, 725.0], [725.0, 695.0, 755.0, 725.0],
            [715.0, 695.0, 745.0, 725.0], [705.0, 695.0, 735.0, 725.0], [695.0, 695.0, 725.0, 725.0], [685.0, 695.0, 715.0, 725.0], [675.0, 695.0, 705.0, 725.0],
            [665.0, 695.0, 695.0, 725.0], [655.0, 695.0, 685.0, 725.0], [645.0, 695.0, 675.0, 725.0], [635.0, 695.0, 665.0, 725.0], [635.0, 685.0, 665.0, 715.0],
            [635.0, 675.0, 665.0, 705.0], [635.0, 665.0, 665.0, 695.0], [635.0, 655.0, 665.0, 685.0], [635.0, 645.0, 665.0, 675.0], [635.0, 635.0, 665.0, 665.0],
            [625.0, 635.0, 655.0, 665.0], [615.0, 635.0, 645.0, 665.0], [605.0, 635.0, 635.0, 665.0], [595.0, 635.0, 625.0, 665.0], [585.0, 635.0, 615.0, 665.0],
            [575.0, 635.0, 605.0, 665.0], [575.0, 645.0, 605.0, 675.0], [575.0, 655.0, 605.0, 685.0], [575.0, 665.0, 605.0, 695.0], [575.0, 675.0, 605.0, 705.0],
            [575.0, 685.0, 605.0, 715.0], [575.0, 695.0, 605.0, 725.0], [565.0, 695.0, 595.0, 725.0], [555.0, 695.0, 585.0, 725.0], [545.0, 695.0, 575.0, 725.0],
            [535.0, 695.0, 565.0, 725.0], [525.0, 695.0, 555.0, 725.0], [515.0, 695.0, 545.0, 725.0], [515.0, 705.0, 545.0, 735.0], [515.0, 715.0, 545.0, 745.0],
            [515.0, 725.0, 545.0, 755.0], [515.0, 735.0, 545.0, 765.0], [515.0, 745.0, 545.0, 775.0], [455.0, 745.0, 485.0, 775.0], [455.0, 735.0, 485.0, 765.0],
            [455.0, 725.0, 485.0, 755.0], [455.0, 715.0, 485.0, 745.0], [455.0, 705.0, 485.0, 735.0], [455.0, 695.0, 485.0, 725.0], [445.0, 695.0, 475.0, 725.0],
            [435.0, 695.0, 465.0, 725.0], [425.0, 695.0, 455.0, 725.0], [415.0, 695.0, 445.0, 725.0], [405.0, 695.0, 435.0, 725.0], [395.0, 695.0, 425.0, 725.0],
            [395.0, 685.0, 425.0, 715.0], [395.0, 675.0, 425.0, 705.0], [395.0, 665.0, 425.0, 695.0], [395.0, 655.0, 425.0, 685.0], [395.0, 645.0, 425.0, 675.0],
            [395.0, 635.0, 425.0, 665.0], [385.0, 635.0, 415.0, 665.0], [375.0, 635.0, 405.0, 665.0], [365.0, 635.0, 395.0, 665.0], [355.0, 635.0, 385.0, 665.0],
            [345.0, 635.0, 375.0, 665.0], [335.0, 635.0, 365.0, 665.0], [335.0, 625.0, 365.0, 655.0], [335.0, 615.0, 365.0, 645.0], [335.0, 605.0, 365.0, 635.0],
            [335.0, 595.0, 365.0, 625.0], [335.0, 645.0, 365.0, 675.0], [335.0, 655.0, 365.0, 685.0], [335.0, 665.0, 365.0, 695.0], [335.0, 675.0, 365.0, 705.0],
            [335.0, 685.0, 365.0, 715.0], [335.0, 695.0, 365.0, 725.0], [325.0, 695.0, 355.0, 725.0], [315.0, 695.0, 345.0, 725.0], [305.0, 695.0, 335.0, 725.0],
            [295.0, 695.0, 325.0, 725.0], [405.0, 635.0, 435.0, 665.0], [415.0, 635.0, 445.0, 665.0], [425.0, 635.0, 455.0, 665.0], [435.0, 635.0, 465.0, 665.0],
            [445.0, 635.0, 475.0, 665.0], [455.0, 635.0, 485.0, 665.0], [465.0, 635.0, 495.0, 665.0], [475.0, 635.0, 505.0, 665.0], [485.0, 635.0, 515.0, 665.0],
            [495.0, 635.0, 525.0, 665.0], [505.0, 635.0, 535.0, 665.0], [515.0, 635.0, 545.0, 665.0], [525.0, 635.0, 555.0, 665.0], [535.0, 635.0, 565.0, 665.0],
            [545.0, 635.0, 575.0, 665.0], [555.0, 635.0, 585.0, 665.0], [565.0, 635.0, 595.0, 665.0], [695.0, 685.0, 725.0, 715.0], [695.0, 675.0, 725.0, 705.0],
            [695.0, 665.0, 725.0, 695.0], [695.0, 655.0, 725.0, 685.0], [695.0, 645.0, 725.0, 675.0], [695.0, 635.0, 725.0, 665.0], [705.0, 635.0, 735.0, 665.0],
            [715.0, 635.0, 745.0, 665.0], [725.0, 635.0, 755.0, 665.0], [735.0, 635.0, 765.0, 665.0], [735.0, 625.0, 765.0, 655.0], [735.0, 615.0, 765.0, 645.0],
            [735.0, 605.0, 765.0, 635.0], [735.0, 595.0, 765.0, 625.0], [735.0, 585.0, 765.0, 615.0], [735.0, 575.0, 765.0, 605.0], [725.0, 575.0, 755.0, 605.0],
            [715.0, 575.0, 745.0, 605.0], [705.0, 575.0, 735.0, 605.0], [695.0, 575.0, 725.0, 605.0], [685.0, 575.0, 715.0, 605.0], [675.0, 575.0, 705.0, 605.0],
            [665.0, 575.0, 695.0, 605.0], [655.0, 575.0, 685.0, 605.0], [645.0, 575.0, 675.0, 605.0], [635.0, 575.0, 665.0, 605.0], [635.0, 585.0, 665.0, 615.0],
            [635.0, 595.0, 665.0, 625.0], [635.0, 605.0, 665.0, 635.0], [635.0, 615.0, 665.0, 645.0], [635.0, 625.0, 665.0, 655.0], [455.0, 625.0, 485.0, 655.0],
            [455.0, 615.0, 485.0, 645.0], [455.0, 605.0, 485.0, 635.0], [455.0, 595.0, 485.0, 625.0], [455.0, 585.0, 485.0, 615.0], [455.0, 575.0, 485.0, 605.0],
            [445.0, 575.0, 475.0, 605.0], [435.0, 575.0, 465.0, 605.0], [425.0, 575.0, 455.0, 605.0], [415.0, 575.0, 445.0, 605.0], [405.0, 575.0, 435.0, 605.0],
            [405.0, 515.0, 435.0, 545.0], [415.0, 515.0, 445.0, 545.0], [425.0, 515.0, 455.0, 545.0], [435.0, 515.0, 465.0, 545.0], [445.0, 515.0, 475.0, 545.0],
            [455.0, 515.0, 485.0, 545.0], [465.0, 515.0, 495.0, 545.0], [475.0, 515.0, 505.0, 545.0], [485.0, 515.0, 515.0, 545.0], [495.0, 515.0, 525.0, 545.0],
            [505.0, 515.0, 535.0, 545.0], [515.0, 515.0, 545.0, 545.0], [525.0, 515.0, 555.0, 545.0], [535.0, 515.0, 565.0, 545.0], [545.0, 515.0, 575.0, 545.0],
            [555.0, 515.0, 585.0, 545.0], [565.0, 515.0, 595.0, 545.0], [575.0, 515.0, 605.0, 545.0], [575.0, 525.0, 605.0, 555.0], [575.0, 535.0, 605.0, 565.0],
            [575.0, 545.0, 605.0, 575.0], [575.0, 555.0, 605.0, 585.0], [575.0, 565.0, 605.0, 595.0], [575.0, 575.0, 605.0, 605.0], [585.0, 575.0, 615.0, 605.0],
            [595.0, 575.0, 625.0, 605.0], [605.0, 575.0, 635.0, 605.0], [615.0, 575.0, 645.0, 605.0], [565.0, 575.0, 595.0, 605.0], [555.0, 575.0, 585.0, 605.0],
            [545.0, 575.0, 575.0, 605.0], [535.0, 575.0, 565.0, 605.0], [525.0, 575.0, 555.0, 605.0], [515.0, 575.0, 545.0, 605.0], [515.0, 585.0, 545.0, 615.0],
            [515.0, 595.0, 545.0, 625.0], [515.0, 605.0, 545.0, 635.0], [515.0, 615.0, 545.0, 645.0], [625.0, 575.0, 655.0, 605.0], [635.0, 565.0, 665.0, 595.0],
            [635.0, 555.0, 665.0, 585.0], [635.0, 545.0, 665.0, 575.0], [635.0, 535.0, 665.0, 565.0], [635.0, 525.0, 665.0, 555.0], [635.0, 515.0, 665.0, 545.0],
            [635.0, 505.0, 665.0, 535.0], [635.0, 495.0, 665.0, 525.0], [635.0, 485.0, 665.0, 515.0], [635.0, 475.0, 665.0, 505.0], [635.0, 465.0, 665.0, 495.0],
            [635.0, 455.0, 665.0, 485.0], [645.0, 455.0, 675.0, 485.0], [655.0, 455.0, 685.0, 485.0], [665.0, 455.0, 695.0, 485.0], [675.0, 455.0, 705.0, 485.0],
            [685.0, 455.0, 715.0, 485.0], [695.0, 455.0, 725.0, 485.0], [705.0, 455.0, 735.0, 485.0], [715.0, 455.0, 745.0, 485.0], [725.0, 455.0, 755.0, 485.0],
            [735.0, 455.0, 765.0, 485.0], [745.0, 455.0, 775.0, 485.0], [755.0, 455.0, 785.0, 485.0], [765.0, 455.0, 795.0, 485.0], [775.0, 455.0, 805.0, 485.0],
            [785.0, 455.0, 815.0, 485.0], [625.0, 455.0, 655.0, 485.0], [615.0, 455.0, 645.0, 485.0], [605.0, 455.0, 635.0, 485.0], [595.0, 455.0, 625.0, 485.0],
            [585.0, 455.0, 615.0, 485.0], [575.0, 455.0, 605.0, 485.0], [575.0, 465.0, 605.0, 495.0], [575.0, 475.0, 605.0, 505.0], [575.0, 485.0, 605.0, 515.0],
            [575.0, 495.0, 605.0, 525.0], [575.0, 445.0, 605.0, 475.0], [575.0, 435.0, 605.0, 465.0], [575.0, 425.0, 605.0, 455.0], [575.0, 415.0, 605.0, 445.0],
            [575.0, 405.0, 605.0, 435.0], [575.0, 395.0, 605.0, 425.0], [565.0, 395.0, 595.0, 425.0], [555.0, 395.0, 585.0, 425.0], [545.0, 395.0, 575.0, 425.0],
            [535.0, 395.0, 565.0, 425.0], [525.0, 395.0, 555.0, 425.0], [635.0, 345.0, 665.0, 375.0], [635.0, 355.0, 665.0, 385.0], [635.0, 365.0, 665.0, 395.0],
            [635.0, 375.0, 665.0, 405.0], [635.0, 385.0, 665.0, 415.0], [635.0, 395.0, 665.0, 425.0], [635.0, 405.0, 665.0, 435.0], [635.0, 415.0, 665.0, 445.0],
            [635.0, 425.0, 665.0, 455.0], [635.0, 435.0, 665.0, 465.0], [635.0, 445.0, 665.0, 475.0], [335.0, 585.0, 365.0, 615.0], [545.0, 275.0, 575.0, 305.0],
            [635.0, 205.0, 665.0, 235.0], [725.0, 275.0, 755.0, 305.0], [575.0, 505.0, 605.0, 535.0], [515.0, 625.0, 545.0, 655.0], [285.0, 695.0, 315.0, 725.0])


dec_ghost=([335.0, 455.0, 365.0, 485.0], [335.0, 335.0, 365.0, 365.0], [335.0, 275.0, 365.0, 305.0], [335.0, 195.0, 365.0, 225.0],
           [235.0, 195.0, 265.0, 225.0], [455.0, 195.0, 485.0, 225.0], [455.0, 275.0, 485.0, 305.0], [395.0, 275.0, 425.0, 305.0],
           [235.0, 275.0, 265.0, 305.0], [235.0, 335.0, 265.0, 365.0], [395.0, 335.0, 425.0, 365.0], [455.0, 335.0, 485.0, 365.0],
           [395.0, 395.0, 425.0, 425.0], [395.0, 455.0, 425.0, 485.0], [395.0, 515.0, 425.0, 545.0], [395.0, 575.0, 425.0, 605.0],
           [335.0, 575.0, 365.0, 605.0], [235.0, 575.0, 265.0, 605.0], [235.0, 635.0, 265.0, 665.0], [275.0, 635.0, 305.0, 665.0],
           [275.0, 695.0, 305.0, 725.0], [235.0, 695.0, 265.0, 725.0], [235.0, 755.0, 265.0, 785.0], [455.0, 755.0, 485.0, 785.0],
           [455.0, 695.0, 485.0, 725.0], [395.0, 695.0, 425.0, 725.0], [395.0, 635.0, 425.0, 665.0], [335.0, 635.0, 365.0, 665.0],
           [335.0, 695.0, 365.0, 725.0], [455.0, 575.0, 485.0, 605.0], [515.0, 755.0, 545.0, 785.0], [515.0, 695.0, 545.0, 725.0],
           [575.0, 695.0, 605.0, 725.0], [575.0, 635.0, 605.0, 665.0], [635.0, 635.0, 665.0, 665.0], [635.0, 695.0, 665.0, 725.0],
           [735.0, 695.0, 765.0, 725.0], [735.0, 755.0, 765.0, 785.0], [695.0, 695.0, 725.0, 725.0], [695.0, 635.0, 725.0, 665.0],
           [735.0, 635.0, 765.0, 665.0], [735.0, 575.0, 765.0, 605.0], [635.0, 575.0, 665.0, 605.0], [575.0, 575.0, 605.0, 605.0],
           [515.0, 575.0, 545.0, 605.0], [575.0, 515.0, 605.0, 545.0], [575.0, 455.0, 605.0, 485.0], [635.0, 455.0, 665.0, 485.0],
           [635.0, 335.0, 665.0, 365.0], [735.0, 335.0, 765.0, 365.0], [735.0, 275.0, 765.0, 305.0], [735.0, 195.0, 765.0, 225.0],
           [635.0, 195.0, 665.0, 225.0], [635.0, 275.0, 665.0, 305.0], [515.0, 195.0, 545.0, 225.0], [515.0, 275.0, 545.0, 305.0],
           [575.0, 275.0, 605.0, 305.0], [575.0, 335.0, 605.0, 365.0], [515.0, 335.0, 545.0, 365.0], [575.0, 395.0, 605.0, 425.0])

spec_ghost=([455.0, 395.0, 485.0, 425.0], [515.0, 395.0, 545.0, 425.0], [515.0, 635.0, 545.0, 665.0], [455.0, 635.0, 485.0, 665.0])

home=[[475.0, 395.0, 505.0, 425.0], [495.0, 395.0, 525.0, 425.0], [455.0, 395.0, 485.0, 425.0], [515.0, 395.0, 545.0, 425.0]]

root = Tk()


#----------------------------------------------------------------------------------------------------------------------------

def eat(pacman_c,blinky_c,pinky_c,inky_c,clyde_c):
    global lives, xy, xy_g_1, xy_g_2, xy_g_3, xy_g_4    
    if pacman_c == blinky_c:
        lives-=1
        playground.itemconfig(pacman, start=225)
        playground.coords(pacman,495.0,635.0,525.0,665.0)
        playground.coords(shadow,495.0,395.0,525.0,425.0)
        playground.coords(speedy,455.0,395.0,485.0,425.0)
        playground.coords(inky,455.0,435.0,485.0,465.0)
        playground.coords(clyde,495.0,435.0,525.0,465.0)
        xy=[-20,0]
        xy_g_1=[-20,0]
        xy_g_2=[20, 0]
        xy_g_3=[0, 20]
        xy_g_4=[-20,0]
        root.after(1500,print())
    elif pacman_c == pinky_c:
        lives-=1
        playground.itemconfig(pacman, start=225)
        playground.coords(pacman,495.0,635.0,525.0,665.0)
        playground.coords(shadow,495.0,395.0,525.0,425.0)
        playground.coords(speedy,455.0,395.0,485.0,425.0)
        playground.coords(inky,455.0,435.0,485.0,465.0)
        playground.coords(clyde,495.0,435.0,525.0,465.0)
        xy=[-20,0]
        xy_g_1=[-20,0]
        xy_g_2=[20, 0]
        xy_g_3=[0, 20]
        xy_g_4=[-20,0]
        root.after(1500,print())
        
    elif pacman_c == inky_c:
        lives-=1
        playground.itemconfig(pacman, start=225)
        playground.coords(pacman,495.0,635.0,525.0,665.0)
        playground.coords(shadow,495.0,395.0,525.0,425.0)
        playground.coords(speedy,455.0,395.0,485.0,425.0)
        playground.coords(inky,455.0,435.0,485.0,465.0)
        playground.coords(clyde,495.0,435.0,525.0,465.0)
        xy=[-20,0]
        xy_g_1=[-20,0]
        xy_g_2=[20, 0]
        xy_g_3=[0, 20]
        xy_g_4=[-20,0]
        root.after(1500,print())
        
    elif pacman_c == clyde_c:
        lives-=1
        playground.itemconfig(pacman, start=225)
        playground.coords(pacman,495.0,635.0,525.0,665.0)
        playground.coords(shadow,495.0,395.0,525.0,425.0)
        playground.coords(speedy,455.0,395.0,485.0,425.0)
        playground.coords(inky,455.0,435.0,485.0,465.0)
        playground.coords(clyde,495.0,435.0,525.0,465.0)
        xy=[-20,0]
        xy_g_1=[-20,0]
        xy_g_2=[20, 0]
        xy_g_3=[0, 20]
        xy_g_4=[-20,0]
        root.after(1500,print())




    
def turn_left(event):
    global xy
    playground.itemconfig(pacman, start=225)
    xy=[-20,0]
    
def turn_up(event):
    global xy
    playground.itemconfig(pacman, start=135)
    xy=[0,-20]

def turn_right(event):
    global xy
    playground.itemconfig(pacman, start=45)
    xy=[20,0]
    
def turn_down(event):
    global xy
    playground.itemconfig(pacman, start=325)
    xy=[0,20]

def move_p(xy):
    playground.move(pacman,xy[0],xy[1])


def ent(event):
    x1,y1,x2,y2=playground.coords(pacman)
    home.append([x1,y1,x2,y2])
    playground.create_rectangle(x1,y1,x2,y2,fill='green')

def check(xy):
    global score
    x1,y1,x2,y2=playground.coords(pacman)

    x1+=xy[0]
    y1+=xy[1]
    x2+=xy[0]
    y2+=xy[1]
    try:
        if playground.find_overlapping(x1+15,y1+15,x2-15,y2-15)[0]<len(set_dot)+1:
            playground.delete(playground.find_overlapping(x1+15,y1+15,x2-15,y2-15)[0])
            score+=10
    except IndexError:
        pass
    if [x1,y1,x2,y2] in set_coords:
        if [x1,y1,x2,y2] == [195.0,455.0,225.0,485.0]:
            playground.move(pacman,580,0)
            return 1
        elif [x1,y1,x2,y2] == [775.0,455.0,805.0,485.0]:
            playground.move(pacman,-580,0)
            return 1
        return 1
    else:
        return 0

def ex(score,lives):
    if lives == -1:
        playground.delete('all')
        playground.create_text(500, 500, text='YOU LOSS', fill='red')
        return 0
    elif score == 2440:
        playground.delete('all')
        playground.create_text(500, 500, text='YOU WIN', fill='red')
        return 0
    return 1

    
def start():
   global score
   if check(xy) == 1:
        root.after(20,move_p(xy))
   root.bind('w',turn_up)
   root.bind('a',turn_left)
   root.bind('s',turn_down)
   root.bind('d',turn_right)
   root.bind('p',ent)
   if check_g_1(xy_g_1) == 1:
       root.after(20,move_g_1(xy_g_1))
       decision_1(xy_g_1)
   if check_g_2(xy_g_2) == 1:
       root.after(20,move_g_2(xy_g_2))
       decision_2(xy_g_2, xy)
   if score>300:
       out_g_3()
       if check_g_3(xy_g_3) == 1:
           root.after(20,move_g_3(xy_g_3))
           decision_3(xy_g_3, xy, way_shadow)
   if score>800:
       out_g_4()
       if check_g_4(xy_g_4) == 1:
           root.after(20,move_g_4(xy_g_4))
           decision_4(xy_g_4, xy)
   eat(playground.coords(pacman),playground.coords(shadow),playground.coords(speedy),playground.coords(inky),playground.coords(clyde))
   if ex(score,lives):
       root.after(20,start)

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
   
def move_g_1(xy_g_1):
    playground.move(shadow,xy_g_1[0],xy_g_1[1])

    
def turn_left_g_1():
    global xy_g_1
    xy_g_1=[-20,0]
    
def turn_up_g_1():
    global xy_g_1
    xy_g_1=[0,-20]

def turn_right_g_1():
    global xy_g_1
    xy_g_1=[20,0]
    
def turn_down_g_1():
    global xy_g_1
    xy_g_1=[0,20]


def decision_1(xy_g_1):
    global way_shadow
    len_p1=0
    len_p2=0
    len_p3=0
    len_list=list()
    min_p=0
    x1_g,y1_g,x2_g,y2_g=playground.coords(shadow)
    x1_p,y1_p,x2_p,y2_p=playground.coords(pacman)

    
    if [x1_g,y1_g,x2_g,y2_g] in spec_ghost:
        if xy_g_1 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                turn_right_g_1()      
        elif xy_g_1 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                turn_left_g_1()
        elif xy_g_1 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3) 
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_1()
            elif len_list.index(min_p) == 1:
                turn_right_g_1()
            else:
                turn_left_g_1()
            way_shadow = min_p  
                
        
    if [x1_g,y1_g,x2_g,y2_g] in dec_ghost:
        if xy_g_1 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_right_g_1()
            elif len_list.index(min_p) == 1:
                turn_up_g_1()
            else:
                turn_down_g_1()
            way_shadow = min_p  
                
        elif xy_g_1 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_left_g_1()
            elif len_list.index(min_p) == 1:
                turn_down_g_1()
            else:
                turn_up_g_1()
            way_shadow = min_p  
                
        elif xy_g_1 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_1()
            elif len_list.index(min_p) == 1:
                turn_right_g_1()
            else:
                turn_left_g_1()
            way_shadow = min_p  
                
        elif xy_g_1 ==[0,-20]:
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            
            if len_list.index(min_p) == 0:
                turn_up_g_1()
            elif len_list.index(min_p) == 1:
                turn_left_g_1()
            else:
                turn_right_g_1()
            way_shadow = min_p  
            
def check_g_1(xy_g_1):
    x1_g,y1_g,x2_g,y2_g=playground.coords(shadow)
    x1_g+=xy_g_1[0]
    y1_g+=xy_g_1[1]
    x2_g+=xy_g_1[0]
    y2_g+=xy_g_1[1]
    if [x1_g,y1_g,x2_g,y2_g] in set_coords:
        if [x1_g,y1_g,x2_g,y2_g] == [195.0,455.0,225.0,485.0]:
            playground.move(shadow,580,0)
            return 1
        elif [x1_g,y1_g,x2_g,y2_g] == [775.0,455.0,805.0,485.0]:
            playground.move(shadow,-580,0)
            return 1
        return 1
    else:
        return 0

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------


def move_g_2(xy_g_2):
    playground.move(speedy,xy_g_2[0],xy_g_2[1])

    
def turn_left_g_2():
    global xy_g_2
    xy_g_2=[-20,0]
    
def turn_up_g_2():
    global xy_g_2
    xy_g_2=[0,-20]

def turn_right_g_2():
    global xy_g_2
    xy_g_2=[20,0]
    
def turn_down_g_2():
    global xy_g_2
    xy_g_2=[0,20]


def decision_2(xy_g_2,xy):
    len_p1=0
    len_p2=0
    len_p3=0
    len_list=list()
    min_p=0
    x1_g,y1_g,x2_g,y2_g=playground.coords(speedy)
    x1_p,y1_p,x2_p,y2_p=playground.coords(pacman)
    x1_p+=(xy[0]*4)
    y1_p+=(xy[1]*4)
    x2_p+=(xy[0]*4)
    y2_p+=(xy[1]*4)

    
    if [x1_g,y1_g,x2_g,y2_g] in spec_ghost:
        if xy_g_2 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                turn_right_g_2()      
        elif xy_g_2 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                turn_left_g_2()
        elif xy_g_2 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_2()
            elif len_list.index(min_p) == 1:
                turn_right_g_2()
            else:
                turn_left_g_2()
                
        
    if [x1_g,y1_g,x2_g,y2_g] in dec_ghost:
        if xy_g_2 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_right_g_2()
            elif len_list.index(min_p) == 1:
                turn_up_g_2()
            else:
                turn_down_g_2()
                
        elif xy_g_2 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_left_g_2()
            elif len_list.index(min_p) == 1:
                turn_down_g_2()
            else:
                turn_up_g_2()
                
        elif xy_g_2 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_2()
            elif len_list.index(min_p) == 1:
                turn_right_g_2()
            else:
                turn_left_g_2()
                
        elif xy_g_2 ==[0,-20]:
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_up_g_2()
            elif len_list.index(min_p) == 1:
                turn_left_g_2()
            else:
                turn_right_g_2()
            
            
def check_g_2(xy_g_2):
    x1_g,y1_g,x2_g,y2_g=playground.coords(speedy)
    x1_g+=xy_g_2[0]
    y1_g+=xy_g_2[1]
    x2_g+=xy_g_2[0]
    y2_g+=xy_g_2[1]
    if [x1_g,y1_g,x2_g,y2_g] in set_coords:
        if [x1_g,y1_g,x2_g,y2_g] == [195.0,455.0,225.0,485.0]:
            playground.move(speedy,580,0)
            return 1
        elif [x1_g,y1_g,x2_g,y2_g] == [775.0,455.0,805.0,485.0]:
            playground.move(speedy,-580,0)
            return 1
        return 1
    else:
        return 0

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------

def out_g_3():
    global xy_g_3
    if playground.coords(inky)==[455,435,485,465]:
        playground.move(inky,40,-40)
        xy_g_3=[-20,0]
    

def move_g_3(xy_g_2):
    playground.move(inky,xy_g_3[0],xy_g_3[1])

    
def turn_left_g_3():
    global xy_g_3
    xy_g_3=[-20,0]
    
def turn_up_g_3():
    global xy_g_3
    xy_g_3=[0,-20]

def turn_right_g_3():
    global xy_g_3
    xy_g_3=[20,0]
    
def turn_down_g_3():
    global xy_g_3
    xy_g_3=[0,20]


def decision_3(xy_g_3,xy,way_shadow):
    len_p1=0
    len_p2=0
    len_p3=0
    len_list=list()
    min_p=0
    x1_g,y1_g,x2_g,y2_g=playground.coords(inky)
    x1_p,y1_p,x2_p,y2_p=playground.coords(pacman)
    x1_p+=(xy[0]*2)
    y1_p+=(xy[1]*2)
    x2_p+=(xy[0]*2)
    y2_p+=(xy[1]*2)
    x1_p+=way_shadow
    y1_p+=way_shadow
    x2_p+=way_shadow
    y2_p+=way_shadow
    
    if [x1_g,y1_g,x2_g,y2_g] in spec_ghost:
        if xy_g_3 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                turn_right_g_3()      
        elif xy_g_3 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                turn_left_g_3()
        elif xy_g_3 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_3()
            elif len_list.index(min_p) == 1:
                turn_right_g_3()
            else:
                turn_left_g_3()
                
        
    if [x1_g,y1_g,x2_g,y2_g] in dec_ghost:
        if xy_g_3 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_right_g_3()
            elif len_list.index(min_p) == 1:
                turn_up_g_3()
            else:
                turn_down_g_3()
                
        elif xy_g_3 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_left_g_3()
            elif len_list.index(min_p) == 1:
                turn_down_g_3()
            else:
                turn_up_g_3()
                
        elif xy_g_3 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_3()
            elif len_list.index(min_p) == 1:
                turn_right_g_3()
            else:
                turn_left_g_3()
                
        elif xy_g_3 ==[0,-20]:
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_up_g_3()
            elif len_list.index(min_p) == 1:
                turn_left_g_3()
            else:
                turn_right_g_3()
            
            
def check_g_3(xy_g_3):
    x1_g,y1_g,x2_g,y2_g=playground.coords(inky)
    x1_g+=xy_g_3[0]
    y1_g+=xy_g_3[1]
    x2_g+=xy_g_3[0]
    y2_g+=xy_g_3[1]
    if [x1_g,y1_g,x2_g,y2_g] in set_coords:
        if [x1_g,y1_g,x2_g,y2_g] == [195.0,455.0,225.0,485.0]:
            playground.move(inky,580,0)
            return 1
        elif [x1_g,y1_g,x2_g,y2_g] == [775.0,455.0,805.0,485.0]:
            playground.move(inky,-580,0)
            return 1
        return 1
    else:
        return 0

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------

def out_g_4():
    global xy_g_4
    if playground.coords(clyde)==[495,435,525,465]:
        playground.move(clyde,0,-40)
        xy_g_4=[20,0]
    

def move_g_4(xy_g_4):
    playground.move(clyde,xy_g_4[0],xy_g_4[1])

    
def turn_left_g_4():
    global xy_g_4
    xy_g_4=[-20,0]
    
def turn_up_g_4():
    global xy_g_4
    xy_g_4=[0,-20]

def turn_right_g_4():
    global xy_g_4
    xy_g_4=[20,0]
    
def turn_down_g_4():
    global xy_g_4
    xy_g_4=[0,20]


def decision_4(xy_g_4,xy):
    len_p1=0
    len_p2=0
    len_p3=0
    len_list=list()
    min_p=0
    x1_g,y1_g,x2_g,y2_g=playground.coords(clyde)
    x1_p,y1_p,x2_p,y2_p=playground.coords(pacman)
    x1_p-=(xy[0]*2)
    y1_p-=(xy[1]*2)
    x2_p-=(xy[0]*2)
    y2_p-=(xy[1]*2)

    if [x1_g,y1_g,x2_g,y2_g] in spec_ghost:
        if xy_g_4 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                turn_right_g_4()      
        elif xy_g_4 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                turn_left_g_4()
        elif xy_g_4 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_4()
            elif len_list.index(min_p) == 1:
                turn_right_g_4()
            else:
                turn_left_g_4()
                
        
    if [x1_g,y1_g,x2_g,y2_g] in dec_ghost:
        if xy_g_4 ==[20,0]:
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_right_g_4()
            elif len_list.index(min_p) == 1:
                turn_up_g_4()
            else:
                turn_down_g_4()
                
        elif xy_g_4 ==[-20,0]:
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p1=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p2=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p3=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_left_g_4()
            elif len_list.index(min_p) == 1:
                turn_down_g_4()
            else:
                turn_up_g_4()
                
        elif xy_g_4 ==[0,20]:
            if [x1_g,y1_g+20,x2_g,y2_g+20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g+20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_down_g_4()
            elif len_list.index(min_p) == 1:
                turn_right_g_4()
            else:
                turn_left_g_4()
                
        elif xy_g_4 ==[0,-20]:
            if [x1_g,y1_g-20,x2_g,y2_g-20] in set_coords:
                len_p1=sqrt((abs(x1_g-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p1)
            else:
                len_p1=100000
                len_list.append(len_p1)
                
            if [x1_g-20,y1_g,x2_g-20,y2_g] in set_coords:
                len_p2=sqrt((abs(x1_g+20-x1_p)**2)+(abs(y1_g-y1_p)**2))
                len_list.append(len_p2)
            else:
                len_p2=100000
                len_list.append(len_p2)
                
            if [x1_g+20,y1_g,x2_g+20,y2_g] in set_coords:
                len_p3=sqrt((abs(x1_g-20-x1_p)**2)+(abs(y1_g-20-y1_p)**2))
                len_list.append(len_p3)
            else:
                len_p3=100000
                len_list.append(len_p3)
                
            min_p=min(len_list)
            if len_list.index(min_p) == 0:
                turn_up_g_4()
            elif len_list.index(min_p) == 1:
                turn_left_g_4()
            else:
                turn_right_g_4()
            
            
def check_g_4(xy_g_4):
    x1_g,y1_g,x2_g,y2_g=playground.coords(clyde)
    x1_g+=xy_g_4[0]
    y1_g+=xy_g_4[1]
    x2_g+=xy_g_4[0]
    y2_g+=xy_g_4[1]
    if [x1_g,y1_g,x2_g,y2_g] in set_coords:
        if [x1_g,y1_g,x2_g,y2_g] == [195.0,455.0,225.0,485.0]:
            playground.move(clyde,580,0)
            return 1
        elif [x1_g,y1_g,x2_g,y2_g] == [775.0,455.0,805.0,485.0]:
            playground.move(clyde,-580,0)
            return 1
        return 1
    else:
        return 0

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------

def create_map():
    line1=playground.create_line(x,y+3*20,x+28*20,y+3*20,width=20, fill = 'blue')
    line2=playground.create_line(x,y+34*20,x+28*20,y+34*20,width=20, fill = 'blue')

    line3=playground.create_line(x,y+13*20,x+5.5*20,y+13*20,width=20, fill = 'blue')
    line4=playground.create_line(x+(28-5.5)*20,y+13*20,x+28*20,y+13*20,width=20, fill = 'blue')

    line5=playground.create_line(x,y+16*20,x+5.5*20,y+16*20,width=20, fill = 'blue')
    line6=playground.create_line(x+(28-5.5)*20,y+16*20,x+28*20,y+16*20,width=20, fill = 'blue')

    line7=playground.create_line(x,y+19*20,x+5.5*20,y+19*20,width=20, fill = 'blue')
    line8=playground.create_line(x+(28-5.5)*20,y+19*20,x+28*20,y+19*20,width=20, fill = 'blue')

    line9=playground.create_line(x,y+22*20,x+5.5*20,y+22*20,width=20, fill = 'blue')
    line10=playground.create_line(x+(28-5.5)*20,y+22*20,x+28*20,y+22*20,width=20, fill = 'blue')

    line11=playground.create_line(x+5*20,y+12.5*20,x+5*20,y+16.5*20,width=20, fill = 'blue')
    line12=playground.create_line(x+(28-5)*20,y+12.5*20,x+(28-5)*20,y+16.5*20,width=20, fill = 'blue')

    line13=playground.create_line(x+5*20,y+18.5*20,x+5*20,y+22.5*20,width=20, fill = 'blue')
    line14=playground.create_line(x+(28-5)*20,y+18.5*20,x+(28-5)*20,y+22.5*20,width=20, fill = 'blue')

    line15 = playground.create_line(x,y+2.5*20,x,y+13.5*20,width=20, fill = 'blue')
    line16 = playground.create_line(x+28*20,y+2.5*20,x+28*20,y+13.5*20,width=20, fill = 'blue')

    line17 = playground.create_line(x,y+21.5*20,x,y+34.5*20,width=20, fill = 'blue')
    line18 = playground.create_line(x+28*20,y+21.5*20,x+28*20,y+34.5*20,width=20, fill = 'blue')

    block1=playground.create_rectangle(x+2.5*20,y+5.5*20,x+5.5*20,y+7.5*20,outline = 'blue', fill='blue')
    block2=playground.create_rectangle(x+(28-2.5)*20,y+5.5*20,x+(28-5.5)*20,y+7.5*20,outline = 'blue', fill='blue')


    block3=playground.create_rectangle(x+7.5*20,y+5.5*20,x+11.5*20,y+7.5*20,outline = 'blue', fill='blue')
    block4=playground.create_rectangle(x+(28-7.5)*20,y+5.5*20,x+(28-11.5)*20,y+7.5*20,outline = 'blue', fill='blue')

    block5=playground.create_rectangle(x+2.5*20,y+9.5*20,x+5.5*20,y+10.5*20,outline = 'blue', fill='blue')
    block6=playground.create_rectangle(x+(28-2.5)*20,y+9.5*20,x+(28-5.5)*20,y+10.5*20,outline = 'blue', fill='blue')

    block7=playground.create_rectangle(x+13.5*20,y+2.5*20,x+14.5*20,y+7.5*20,outline = 'blue', fill='blue')

    block8=playground.create_rectangle(x+7.5*20,y+24.5*20,x+11.5*20,y+25.5*20,outline = 'blue', fill='blue')
    block9=playground.create_rectangle(x+(28-7.5)*20,y+24.5*20,x+(28-11.5)*20,y+25.5*20,outline = 'blue', fill='blue')

    block10=playground.create_rectangle(x+7.5*20,y+18.5*20,x+8.5*20,y+22.5*20,outline = 'blue', fill='blue')
    block11=playground.create_rectangle(x+(28-7.5)*20,y+18.5*20,x+(28-8.5)*20,y+22.5*20,outline = 'blue', fill='blue')

    block12=playground.create_rectangle(x+0.5*20,y+27.5*20,x+2.5*20,y+28.5*20,outline = 'blue', fill='blue')
    block13=playground.create_rectangle(x+(28-0.5)*20,y+27.5*20,x+(28-2.5)*20,y+28.5*20,outline = 'blue', fill='blue')

    block14=playground.create_polygon(x+7.5*20,y+9.5*20,x+8.5*20,y+9.5*20,x+8.5*20,y+12.5*20,x+11.5*20,y+12.5*20,
                                      x+11.5*20,y+13.5*20,x+8.5*20,y+13.5*20,x+8.5*20,y+16.5*20,x+7.5*20,y+16.5*20,outline = 'blue', fill='blue')

    block15=playground.create_polygon(x+(28-7.5)*20,y+9.5*20,x+(28-8.5)*20,y+9.5*20,x+(28-8.5)*20,y+12.5*20,x+(28-11.5)*20,y+12.5*20,
                                      x+(28-11.5)*20,y+13.5*20,x+(28-8.5)*20,y+13.5*20,x+(28-8.5)*20,y+16.5*20,x+(28-7.5)*20,y+16.5*20,outline = 'blue', fill='blue')

    block16=playground.create_polygon(x+17.5*20,y+9.5*20,x+17.5*20,y+10.5*20,x+14.5*20,y+10.5*20,x+14.5*20,y+13.5*20,
                                      x+13.5*20,y+13.5*20,x+13.5*20,y+10.5*20,x+10.5*20,y+10.5*20,x+10.5*20,y+9.5*20,outline = 'blue', fill='blue')

    block17=playground.create_polygon(x+17.5*20,y+21.5*20,x+17.5*20,y+22.5*20,x+14.5*20,y+22.5*20,x+14.5*20,y+25.5*20,
                                      x+13.5*20,y+25.5*20,x+13.5*20,y+22.5*20,x+10.5*20,y+22.5*20,x+10.5*20,y+21.5*20,outline = 'blue', fill='blue')

    block18=playground.create_polygon(x+17.5*20,y+27.5*20,x+17.5*20,y+28.5*20,x+14.5*20,y+28.5*20,x+14.5*20,y+31.5*20,
                                      x+13.5*20,y+31.5*20,x+13.5*20,y+28.5*20,x+10.5*20,y+28.5*20,x+10.5*20,y+27.5*20,outline = 'blue', fill='blue')

    block19=playground.create_polygon(x+2.5*20,y+24.5*20,x+5.5*20,y+24.5*20,x+5.5*20,y+28.5*20,x+4.5*20,y+28.5*20,
                                      x+4.5*20,y+25.5*20,x+2.5*20,y+25.5*20,outline = 'blue', fill='blue')

    block20=playground.create_polygon(x+(28-2.5)*20,y+24.5*20,x+(28-5.5)*20,y+24.5*20,x+(28-5.5)*20,y+28.5*20,x+(28-4.5)*20,y+28.5*20,
                                      x+(28-4.5)*20,y+25.5*20,x+(28-2.5)*20,y+25.5*20,outline = 'blue', fill='blue')

    block21=playground.create_polygon(x+2.5*20,y+30.5*20,x+7.5*20,y+30.5*20,x+7.5*20,y+27.5*20,x+8.5*20,y+27.5*20,
                                      x+8.5*20,y+30.5*20,x+11.5*20,y+30.5*20,x+11.5*20,y+31.5*20,x+2.5*20,y+31.5*20,outline = 'blue', fill='blue')

    block22=playground.create_polygon(x+(28-2.5)*20,y+30.5*20,x+(28-7.5)*20,y+30.5*20,x+(28-7.5)*20,y+27.5*20,x+(28-8.5)*20,y+27.5*20,
                                      x+(28-8.5)*20,y+30.5*20,x+(28-11.5)*20,y+30.5*20,x+(28-11.5)*20,y+31.5*20,x+(28-2.5)*20,y+31.5*20,outline = 'blue', fill='blue')

    block23=playground.create_rectangle(x+10.5*20,y+15.5*20,455.0,y+16*20,outline = 'blue', fill='blue')
    block24=playground.create_rectangle(545.0,y+15.5*20,x+17.5*20,y+16*20,outline = 'blue', fill='blue')
    block25=playground.create_rectangle(x+10.5*20,y+15.5*20,x+11*20,y+19.5*20,outline = 'blue', fill='blue')
    block26=playground.create_rectangle(x+11*20,y+19*20,x+17.5*20,y+19.5*20,outline = 'blue', fill='blue')
    block27=playground.create_rectangle(x+17*20,y+15.5*20,x+17.5*20,y+19.5*20,outline = 'blue', fill='blue')
    block28=playground.create_rectangle(455.0,y+15.5*20,545.0,y+15.5*20,outline = 'white', fill='white')

#----------------------------------------------------------------------------------------------------------------------------



#----------------------------------------------------------------------------------------------------------------------------

def all_start():
    start()
#----------------------------------------------------------------------------------------------------------------------------


    

#----------------------------------------------------------------------------------------------------------------------------

playground = Canvas(root, width = 1000, height = 1000, cursor = 'circle', bg = 'black')
playground.pack()


for i in set_dot:
    playground.create_rectangle(i,outline = 'white',fill='white')

create_map()

pacman = playground.create_arc(495.0, 635.0, 525.0, 665.0,start = 225,extent = 270,outline = 'yellow',fill = 'yellow')
shadow = playground.create_oval(495,395,525,425,outline = 'red',fill = 'red')
speedy = playground.create_oval(455,395,485,425,outline = 'pink',fill = 'pink')
inky = playground.create_oval(455,435,485,465,outline = 'lightblue',fill = 'lightblue')
clyde = playground.create_oval(495,435,525,465,outline = 'orange',fill = 'orange')

root.after(2000, all_start)
root.mainloop()



